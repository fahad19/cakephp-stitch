{"name":"CakePHP Stitch Plugin","tagline":"Stitch your JavaScript files as CommonJS for the browser","body":"This is a port of @sstephenson's [Stitch npm module](https://github.com/sstephenson/stitch).\r\n\r\n## What is CommonJS?\r\n\r\nSuppose you have two JavaScript files, under `app/webroot/js/` named `a.js` and `b.js`.\r\n\r\nContent of `a.js`:\r\n\r\n    var A = 'I am A';\r\n\r\n    module.exports = A;\r\n\r\nNow in `b.js`, we can `require()` A by doing this:\r\n\r\n    var A = require('A');\r\n    var B = 'I am B, btw';\r\n    var C = require('another_folder_in_webroot_js/c');\r\n\r\n    module.exports = B; // exporting is optional\r\n\r\n## Requirements\r\n\r\nCompatible with CakePHP 2.x\r\n\r\n## Installation\r\n\r\nClone/Download this repository to `/app/Plugin/Stitch`, and load the plugin from `/app/Config/bootstrap.php`:\r\n\r\n    CakePlugin::load('Stitch', array('bootstrap' => true));\r\n\r\n## Configuration\r\n\r\nSee configuration values in `app/Config/Stitch/Config/bootstrap.php` file.\r\n\r\n* **paths**: array of absolute paths where JavaScript files are located\r\n* **vendors**: array of vendors that you want available globally, like jQuery or Underscore.js\r\n* **write**: absolute path of file where to write the compiled JavaScript file\r\n\r\n### Conflicting module IDs and prefixing\r\n\r\nThere would be cases when you have multiple paths, and end up having two or more same module IDs. In those cases, you can consider prefixing your module IDs.\r\n\r\nFor example, your paths include `/app/webroot/js/` and `/app/Plugin/MyPlugin/webroot/js`, and they both have `foo.js` under their respective js directories. Then you can prefix your plugin's path like this:\r\n\r\n    Configure::write('Stitch.paths', array(\r\n        '/app/webroot/js/',\r\n        '/app/Plugin/MyPlugin/webroot/js/' => array(\r\n            'prefix' => 'my_plugin',\r\n        ),\r\n    ));\r\n\r\nNow in the browser, you can require() the files separately:\r\n\r\n    require('foo');\r\n    require('my_plugin/foo');\r\n\r\n## Usage\r\n\r\nAt the moment, Stitch can perform the compiling via shell based on the configuration found in bootstrap:\r\n\r\n    $ ./Console/cake Stitch.stitch run\r\n\r\nThe shell basically runs the compiler found in a separate Stitch class which is available as a library, and you are free to implement its functionality in various ways. For example, a new StitchHelper utilizing this library eliminating the need of running it via shell.\r\n\r\nSee unit tests for understanding more on how the library works.\r\n\r\n## Extending\r\n\r\nStitch was written for handling JavaScript files only, files that end with `.js` as extensions. But you can extend it for supporting various extensions, like `.underscore` for Underscore.js templates and `.coffee` for CoffeeScript files. All you need to do is add new classes under `/app/Plugin/Stitch/Lib/Compiler/` and it will automatically map them based of file extensions.\r\n\r\n### Naming convention for compiler classes\r\n\r\nCompiler class names begin with StitchCompiler and the suffix is the camelized version of file extension.\r\n\r\n* **.js**: StitchCompilerJs.php\r\n* **.coffee**: StitchCompilerCoffee.php\r\n\r\n## License\r\n\r\n[MIT License](https://github.com/fahad19/cakephp-stitch/blob/master/LICENSE.txt)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}